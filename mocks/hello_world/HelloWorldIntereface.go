// Code generated by mockery. DO NOT EDIT.

package helloworld

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/beabys/go-template/internal/domain/model"
)

// HelloWorldIntereface is an autogenerated mock type for the HelloWorldIntereface type
type HelloWorldIntereface struct {
	mock.Mock
}

type HelloWorldIntereface_Expecter struct {
	mock *mock.Mock
}

func (_m *HelloWorldIntereface) EXPECT() *HelloWorldIntereface_Expecter {
	return &HelloWorldIntereface_Expecter{mock: &_m.Mock}
}

// GetHelloWorld provides a mock function with given fields: _a0
func (_m *HelloWorldIntereface) GetHelloWorld(_a0 context.Context) (*model.HelloWorld, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetHelloWorld")
	}

	var r0 *model.HelloWorld
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*model.HelloWorld, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *model.HelloWorld); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.HelloWorld)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HelloWorldIntereface_GetHelloWorld_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHelloWorld'
type HelloWorldIntereface_GetHelloWorld_Call struct {
	*mock.Call
}

// GetHelloWorld is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *HelloWorldIntereface_Expecter) GetHelloWorld(_a0 interface{}) *HelloWorldIntereface_GetHelloWorld_Call {
	return &HelloWorldIntereface_GetHelloWorld_Call{Call: _e.mock.On("GetHelloWorld", _a0)}
}

func (_c *HelloWorldIntereface_GetHelloWorld_Call) Run(run func(_a0 context.Context)) *HelloWorldIntereface_GetHelloWorld_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *HelloWorldIntereface_GetHelloWorld_Call) Return(_a0 *model.HelloWorld, _a1 error) *HelloWorldIntereface_GetHelloWorld_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HelloWorldIntereface_GetHelloWorld_Call) RunAndReturn(run func(context.Context) (*model.HelloWorld, error)) *HelloWorldIntereface_GetHelloWorld_Call {
	_c.Call.Return(run)
	return _c
}

// NewHelloWorldIntereface creates a new instance of HelloWorldIntereface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHelloWorldIntereface(t interface {
	mock.TestingT
	Cleanup(func())
}) *HelloWorldIntereface {
	mock := &HelloWorldIntereface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
