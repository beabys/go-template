// Code generated by mockery. DO NOT EDIT.

package config

import (
	config "github.com/beabys/go-template/internal/app/config"
	mock "github.com/stretchr/testify/mock"
)

// AppConfig is an autogenerated mock type for the AppConfig type
type AppConfig struct {
	mock.Mock
}

type AppConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *AppConfig) EXPECT() *AppConfig_Expecter {
	return &AppConfig_Expecter{mock: &_m.Mock}
}

// GetConfigs provides a mock function with no fields
func (_m *AppConfig) GetConfigs() *config.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfigs")
	}

	var r0 *config.Config
	if rf, ok := ret.Get(0).(func() *config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	return r0
}

// AppConfig_GetConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigs'
type AppConfig_GetConfigs_Call struct {
	*mock.Call
}

// GetConfigs is a helper method to define mock.On call
func (_e *AppConfig_Expecter) GetConfigs() *AppConfig_GetConfigs_Call {
	return &AppConfig_GetConfigs_Call{Call: _e.mock.On("GetConfigs")}
}

func (_c *AppConfig_GetConfigs_Call) Run(run func()) *AppConfig_GetConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AppConfig_GetConfigs_Call) Return(_a0 *config.Config) *AppConfig_GetConfigs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AppConfig_GetConfigs_Call) RunAndReturn(run func() *config.Config) *AppConfig_GetConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// LoadConfigs provides a mock function with no fields
func (_m *AppConfig) LoadConfigs() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadConfigs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppConfig_LoadConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfigs'
type AppConfig_LoadConfigs_Call struct {
	*mock.Call
}

// LoadConfigs is a helper method to define mock.On call
func (_e *AppConfig_Expecter) LoadConfigs() *AppConfig_LoadConfigs_Call {
	return &AppConfig_LoadConfigs_Call{Call: _e.mock.On("LoadConfigs")}
}

func (_c *AppConfig_LoadConfigs_Call) Run(run func()) *AppConfig_LoadConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AppConfig_LoadConfigs_Call) Return(_a0 error) *AppConfig_LoadConfigs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AppConfig_LoadConfigs_Call) RunAndReturn(run func() error) *AppConfig_LoadConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// NewAppConfig creates a new instance of AppConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppConfig {
	mock := &AppConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
