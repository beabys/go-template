// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	config "gitlab.com/beabys/go-template/internal/app/config"

	logger "gitlab.com/beabys/go-template/pkg/logger"

	mock "github.com/stretchr/testify/mock"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

// Recoverer provides a mock function with given fields: _a0
func (_m *Application) Recoverer(_a0 func()) {
	_m.Called(_a0)
}

// Run provides a mock function with given fields: _a0
func (_m *Application) Run(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLogger provides a mock function with given fields: _a0
func (_m *Application) SetLogger(_a0 logger.Logger) {
	_m.Called(_a0)
}

// Setup provides a mock function with given fields: _a0, _a1
func (_m *Application) Setup(_a0 config.AppConfig, _a1 context.CancelFunc) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(config.AppConfig, context.CancelFunc) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
