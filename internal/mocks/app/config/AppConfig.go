// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	config "gitlab.com/beabys/go-template/internal/app/config"
)

// AppConfig is an autogenerated mock type for the AppConfig type
type AppConfig struct {
	mock.Mock
}

// GetConfigs provides a mock function with given fields:
func (_m *AppConfig) GetConfigs() *config.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfigs")
	}

	var r0 *config.Config
	if rf, ok := ret.Get(0).(func() *config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	return r0
}

// LoadConfigs provides a mock function with given fields:
func (_m *AppConfig) LoadConfigs() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadConfigs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAppConfig creates a new instance of AppConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppConfig {
	mock := &AppConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
