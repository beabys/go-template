// Code generated by mockery. DO NOT EDIT.

package v1

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "gitlab.com/beabys/go-template/internal/api/v1"
)

// ClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type ClientWithResponsesInterface struct {
	mock.Mock
}

type ClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientWithResponsesInterface) EXPECT() *ClientWithResponsesInterface_Expecter {
	return &ClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// HelloWorldWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) HelloWorldWithResponse(ctx context.Context, reqEditors ...v1.RequestEditorFn) (*v1.HelloWorldResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HelloWorldWithResponse")
	}

	var r0 *v1.HelloWorldResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...v1.RequestEditorFn) (*v1.HelloWorldResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...v1.RequestEditorFn) *v1.HelloWorldResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.HelloWorldResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...v1.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_HelloWorldWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HelloWorldWithResponse'
type ClientWithResponsesInterface_HelloWorldWithResponse_Call struct {
	*mock.Call
}

// HelloWorldWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...v1.RequestEditorFn
func (_e *ClientWithResponsesInterface_Expecter) HelloWorldWithResponse(ctx interface{}, reqEditors ...interface{}) *ClientWithResponsesInterface_HelloWorldWithResponse_Call {
	return &ClientWithResponsesInterface_HelloWorldWithResponse_Call{Call: _e.mock.On("HelloWorldWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *ClientWithResponsesInterface_HelloWorldWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...v1.RequestEditorFn)) *ClientWithResponsesInterface_HelloWorldWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]v1.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(v1.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *ClientWithResponsesInterface_HelloWorldWithResponse_Call) Return(_a0 *v1.HelloWorldResponse, _a1 error) *ClientWithResponsesInterface_HelloWorldWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientWithResponsesInterface_HelloWorldWithResponse_Call) RunAndReturn(run func(context.Context, ...v1.RequestEditorFn) (*v1.HelloWorldResponse, error)) *ClientWithResponsesInterface_HelloWorldWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientWithResponsesInterface creates a new instance of ClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientWithResponsesInterface {
	mock := &ClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
