// Code generated by mockery. DO NOT EDIT.

package api

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	errgroup "golang.org/x/sync/errgroup"
)

// ApiServer is an autogenerated mock type for the ApiServer type
type ApiServer struct {
	mock.Mock
}

type ApiServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ApiServer) EXPECT() *ApiServer_Expecter {
	return &ApiServer_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: _a0, _a1
func (_m *ApiServer) Run(_a0 context.Context, _a1 *errgroup.Group) {
	_m.Called(_a0, _a1)
}

// ApiServer_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type ApiServer_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *errgroup.Group
func (_e *ApiServer_Expecter) Run(_a0 interface{}, _a1 interface{}) *ApiServer_Run_Call {
	return &ApiServer_Run_Call{Call: _e.mock.On("Run", _a0, _a1)}
}

func (_c *ApiServer_Run_Call) Run(run func(_a0 context.Context, _a1 *errgroup.Group)) *ApiServer_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*errgroup.Group))
	})
	return _c
}

func (_c *ApiServer_Run_Call) Return() *ApiServer_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *ApiServer_Run_Call) RunAndReturn(run func(context.Context, *errgroup.Group)) *ApiServer_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewApiServer creates a new instance of ApiServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApiServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApiServer {
	mock := &ApiServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
