// Code generated by mockery. DO NOT EDIT.

package app

import (
	context "context"

	config "gitlab.com/beabys/go-template/internal/app/config"

	logger "gitlab.com/beabys/go-template/pkg/logger"

	mock "github.com/stretchr/testify/mock"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

type Application_Expecter struct {
	mock *mock.Mock
}

func (_m *Application) EXPECT() *Application_Expecter {
	return &Application_Expecter{mock: &_m.Mock}
}

// Recoverer provides a mock function with given fields: _a0
func (_m *Application) Recoverer(_a0 func()) {
	_m.Called(_a0)
}

// Application_Recoverer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recoverer'
type Application_Recoverer_Call struct {
	*mock.Call
}

// Recoverer is a helper method to define mock.On call
//   - _a0 func()
func (_e *Application_Expecter) Recoverer(_a0 interface{}) *Application_Recoverer_Call {
	return &Application_Recoverer_Call{Call: _e.mock.On("Recoverer", _a0)}
}

func (_c *Application_Recoverer_Call) Run(run func(_a0 func())) *Application_Recoverer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *Application_Recoverer_Call) Return() *Application_Recoverer_Call {
	_c.Call.Return()
	return _c
}

func (_c *Application_Recoverer_Call) RunAndReturn(run func(func())) *Application_Recoverer_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: _a0
func (_m *Application) Run(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Application_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Application_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Application_Expecter) Run(_a0 interface{}) *Application_Run_Call {
	return &Application_Run_Call{Call: _e.mock.On("Run", _a0)}
}

func (_c *Application_Run_Call) Run(run func(_a0 context.Context)) *Application_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Application_Run_Call) Return(_a0 error) *Application_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_Run_Call) RunAndReturn(run func(context.Context) error) *Application_Run_Call {
	_c.Call.Return(run)
	return _c
}

// SetLogger provides a mock function with given fields: _a0
func (_m *Application) SetLogger(_a0 logger.Logger) {
	_m.Called(_a0)
}

// Application_SetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogger'
type Application_SetLogger_Call struct {
	*mock.Call
}

// SetLogger is a helper method to define mock.On call
//   - _a0 logger.Logger
func (_e *Application_Expecter) SetLogger(_a0 interface{}) *Application_SetLogger_Call {
	return &Application_SetLogger_Call{Call: _e.mock.On("SetLogger", _a0)}
}

func (_c *Application_SetLogger_Call) Run(run func(_a0 logger.Logger)) *Application_SetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logger.Logger))
	})
	return _c
}

func (_c *Application_SetLogger_Call) Return() *Application_SetLogger_Call {
	_c.Call.Return()
	return _c
}

func (_c *Application_SetLogger_Call) RunAndReturn(run func(logger.Logger)) *Application_SetLogger_Call {
	_c.Call.Return(run)
	return _c
}

// Setup provides a mock function with given fields: _a0, _a1
func (_m *Application) Setup(_a0 config.AppConfig, _a1 context.CancelFunc) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(config.AppConfig, context.CancelFunc) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Application_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type Application_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
//   - _a0 config.AppConfig
//   - _a1 context.CancelFunc
func (_e *Application_Expecter) Setup(_a0 interface{}, _a1 interface{}) *Application_Setup_Call {
	return &Application_Setup_Call{Call: _e.mock.On("Setup", _a0, _a1)}
}

func (_c *Application_Setup_Call) Run(run func(_a0 config.AppConfig, _a1 context.CancelFunc)) *Application_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.AppConfig), args[1].(context.CancelFunc))
	})
	return _c
}

func (_c *Application_Setup_Call) Return(_a0 error) *Application_Setup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Application_Setup_Call) RunAndReturn(run func(config.AppConfig, context.CancelFunc) error) *Application_Setup_Call {
	_c.Call.Return(run)
	return _c
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
